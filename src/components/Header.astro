
<div>
    <div class="header-container">
        <div class="header-buttons">
            <button class="darkModeBtn" aria-label="Cambiar modo oscuro/claro">
                <i class="fa-solid fa-moon"></i>
            </button>
            <div class="language-menu">
                <button class="langMenuBtn" aria-label="Menú de idiomas">
                    <i class="fa-solid fa-bars"></i>
                </button>
                <div class="language-dropdown">
                    <button class="lang-option" data-lang="es">Español</button>
                    <button class="lang-option" data-lang="en">English</button>
                    <button class="lang-option" data-lang="pt">Português</button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .bg-black {
        background-color: rgb(250, 114, 223);
        color: rgb(147, 29, 197);
        padding: 10px;
        font-size: 20px;
        font-style: italic, bold;
    }

    .header-container {
        display: flex;
        justify-content: end;
        align-items: center;
        padding: 1rem;
        max-width: 1200px;
        margin: 0 auto;
    }

    .header-buttons {
        display: flex;
        gap: 10px;
    }

    button {
        background-color: rgba(255, 255, 255, 0.91);
        color: rgb(147, 29, 197);
        padding: 8px;
        text-align: center;        
        font-style: italic, bold;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        transition: transform 0.3s ease, background-color 0.3s ease;
    }

    button:hover {
        transform: scale(1.1);
    }

    .language-menu {
        position: relative;
    }

    .language-dropdown {
        position: absolute;
        top: 45px;
        right: 0;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        padding: 8px 0;
        min-width: 150px;
        z-index: 100;
        opacity: 0;
        visibility: hidden;
        transform: translateY(-10px);
        transition: opacity 0.3s ease, transform 0.3s ease, visibility 0.3s ease;
    }

    .language-dropdown.show {
        opacity: 1;
        visibility: visible;
        transform: translateY(0);
    }

    .lang-option {
        display: block;
        width: 100%;
        text-align: left;
        padding: 8px 16px;
        background: none;
        border: none;
        border-radius: 0;
        color: rgb(147, 29, 197);
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .lang-option:hover {
        background-color: rgba(250, 114, 223, 0.1);
    }

    .darkModeBtn{
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.623);
    }
    /* Animación para el botón de modo oscuro */
    .darkModeBtn i {
        transition: transform 0.5s ease;
    }

    .darkModeBtn:active i {
        transform: rotate(360deg);
    }

    .langMenuBtn{
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.623);
    }
    /* Animación para el botón de menú */
    .langMenuBtn i {
        transition: transform 0.3s ease;
    }

    .langMenuBtn.active i {
        transform: rotate(90deg);
    }
</style>

<script>

// Elementos DOM
const darkModeBtn = document.querySelector('.darkModeBtn');
const darkModeIcon = document.querySelector('.darkModeBtn i');
const langMenuBtn = document.querySelector('.langMenuBtn');
const langDropdown = document.querySelector('.language-dropdown');
const langOptions = document.querySelectorAll('.lang-option');
const html = document.documentElement;
const body = document.body;
const hero = document.querySelector('#hero');
const services = document.querySelector('#services');
const news = document.querySelector('#news');
const benefits = document.querySelector('#benefits');
const headerTitle = document.querySelector('#header-title');

// Elementos que necesitan modo oscuro
const darkModeElements = [html];

// Verificar si hay una preferencia de modo oscuro guardada
const isDarkMode = localStorage.getItem('darkMode') === 'true';
if (isDarkMode) {
    darkModeIcon.classList.remove('fa-moon');
    darkModeIcon.classList.add('fa-sun');
    document.documentElement.classList.add('dark');
}

// Importar traducciones desde el archivo centralizado
import { translations, updateTexts as updateMainTexts } from '../utils/translations.js';

// Función para actualizar texto preservando HTML
function updateTextPreservingHTML(element, newText) {
    if (!element) return;
    
    // Si el elemento tiene hijos (como spans), preservar la estructura
    const children = element.children;
    if (children.length > 0) {
        // Buscar el nodo de texto que viene después del span
        const textNodes = Array.from(element.childNodes).filter(node => node.nodeType === Node.TEXT_NODE);
        
        // Limpiar todos los nodos de texto existentes
        textNodes.forEach(node => node.remove());
        
        // Agregar el nuevo texto después del span (punto)
        element.appendChild(document.createTextNode(newText));
    } else {
        // Si no tiene hijos, actualizar normalmente
        element.textContent = newText;
    }
}

// Función para actualizar textos según el idioma
function updateTexts(lang) {
    // Usar la función centralizada de traducciones
    updateMainTexts(lang);
    
    // Actualizar el título del encabezado específico del header
    if (headerTitle) headerTitle.textContent = translations[lang].headerTitle;
}

// Función para cambiar idioma
function changeLanguage(lang) {
    updateTexts(lang);
    localStorage.setItem('language', lang);
    
    // Disparar evento personalizado para que otros componentes se actualicen
    const languageChangeEvent = new CustomEvent('languageChanged', {
        detail: { language: lang }
    });
    document.dispatchEvent(languageChangeEvent);
}

// Inicializar traducciones
let currentLang = localStorage.getItem('language') || 'es';
updateTexts(currentLang);

// Evento para cambiar el modo oscuro
darkModeBtn.addEventListener('click', () => {
    // Cambiar el icono
    darkModeIcon.classList.toggle('fa-moon');
    darkModeIcon.classList.toggle('fa-sun');
    
    // Aplicar modo oscuro directamente al elemento html
    document.documentElement.classList.toggle('dark');
    
    // Forzar repintado para asegurar que los estilos se apliquen
    document.body.style.display = 'none';
    document.body.offsetHeight; // Forzar repintado
    document.body.style.display = '';
    
    // Guardar preferencia
    const isDark = darkModeIcon.classList.contains('fa-sun');
    localStorage.setItem('darkMode', isDark);
});

// Evento para mostrar/ocultar el menú de idiomas
langMenuBtn.addEventListener('click', () => {
    langDropdown.classList.toggle('show');
    langMenuBtn.classList.toggle('active');
});

// Cerrar el menú de idiomas al hacer clic fuera de él
document.addEventListener('click', (e) => {
    if (!langMenuBtn.contains(e.target) && !langDropdown.contains(e.target)) {
        langDropdown.classList.remove('show');
        langMenuBtn.classList.remove('active');
    }
});

// Eventos para cambiar el idioma
langOptions.forEach(option => {
    option.addEventListener('click', () => {
        const lang = option.dataset.lang;
        currentLang = lang;
        changeLanguage(lang);
        langDropdown.classList.remove('show');
        langMenuBtn.classList.remove('active');
    });
});
</script>